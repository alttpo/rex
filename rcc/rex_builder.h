#ifndef REX_BUILDER_H
#define REX_BUILDER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#ifndef REX_READER_H
#include "rex_reader.h"
#endif
#ifndef FLATBUFFERS_COMMON_BUILDER_H
#include "flatbuffers_common_builder.h"
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension "bin"
#endif

#define __rex_ChipID_formal_args , rex_ChipID_enum_t v0
#define __rex_ChipID_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, rex_ChipID, rex_ChipID_enum_t)
#define __rex_Comparison_formal_args , rex_Comparison_enum_t v0
#define __rex_Comparison_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, rex_Comparison, rex_Comparison_enum_t)
#define __rex_ErrorCode_formal_args , rex_ErrorCode_enum_t v0
#define __rex_ErrorCode_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, rex_ErrorCode, rex_ErrorCode_enum_t)

typedef flatbuffers_union_ref_t rex_ProgramInstruction_union_ref_t;
typedef flatbuffers_union_vec_ref_t rex_ProgramInstruction_union_vec_ref_t;
static rex_ProgramInstruction_union_ref_t rex_ProgramInstruction_clone(flatbuffers_builder_t *B, rex_ProgramInstruction_union_t t);
typedef flatbuffers_union_ref_t rex_Request_union_ref_t;
typedef flatbuffers_union_vec_ref_t rex_Request_union_vec_ref_t;
static rex_Request_union_ref_t rex_Request_clone(flatbuffers_builder_t *B, rex_Request_union_t t);
typedef flatbuffers_union_ref_t rex_Response_union_ref_t;
typedef flatbuffers_union_vec_ref_t rex_Response_union_vec_ref_t;
static rex_Response_union_ref_t rex_Response_clone(flatbuffers_builder_t *B, rex_Response_union_t t);

static const flatbuffers_voffset_t __rex_EnumerateChipsRequest_required[] = { 0 };
typedef flatbuffers_ref_t rex_EnumerateChipsRequest_ref_t;
static rex_EnumerateChipsRequest_ref_t rex_EnumerateChipsRequest_clone(flatbuffers_builder_t *B, rex_EnumerateChipsRequest_table_t t);
__flatbuffers_build_table(flatbuffers_, rex_EnumerateChipsRequest, 0)

static const flatbuffers_voffset_t __rex_Chip_required[] = { 0 };
typedef flatbuffers_ref_t rex_Chip_ref_t;
static rex_Chip_ref_t rex_Chip_clone(flatbuffers_builder_t *B, rex_Chip_table_t t);
__flatbuffers_build_table(flatbuffers_, rex_Chip, 4)

static const flatbuffers_voffset_t __rex_EnumerateChipsResponse_required[] = { 0 };
typedef flatbuffers_ref_t rex_EnumerateChipsResponse_ref_t;
static rex_EnumerateChipsResponse_ref_t rex_EnumerateChipsResponse_clone(flatbuffers_builder_t *B, rex_EnumerateChipsResponse_table_t t);
__flatbuffers_build_table(flatbuffers_, rex_EnumerateChipsResponse, 1)

static const flatbuffers_voffset_t __rex_WriteMemory_required[] = { 0 };
typedef flatbuffers_ref_t rex_WriteMemory_ref_t;
static rex_WriteMemory_ref_t rex_WriteMemory_clone(flatbuffers_builder_t *B, rex_WriteMemory_table_t t);
__flatbuffers_build_table(flatbuffers_, rex_WriteMemory, 3)

static const flatbuffers_voffset_t __rex_ReadMemory_required[] = { 0 };
typedef flatbuffers_ref_t rex_ReadMemory_ref_t;
static rex_ReadMemory_ref_t rex_ReadMemory_clone(flatbuffers_builder_t *B, rex_ReadMemory_table_t t);
__flatbuffers_build_table(flatbuffers_, rex_ReadMemory, 3)

static const flatbuffers_voffset_t __rex_SetTimeout_required[] = { 0 };
typedef flatbuffers_ref_t rex_SetTimeout_ref_t;
static rex_SetTimeout_ref_t rex_SetTimeout_clone(flatbuffers_builder_t *B, rex_SetTimeout_table_t t);
__flatbuffers_build_table(flatbuffers_, rex_SetTimeout, 1)

static const flatbuffers_voffset_t __rex_WaitUntil_required[] = { 0 };
typedef flatbuffers_ref_t rex_WaitUntil_ref_t;
static rex_WaitUntil_ref_t rex_WaitUntil_clone(flatbuffers_builder_t *B, rex_WaitUntil_table_t t);
__flatbuffers_build_table(flatbuffers_, rex_WaitUntil, 5)

static const flatbuffers_voffset_t __rex_WaitWhileZero_required[] = { 0 };
typedef flatbuffers_ref_t rex_WaitWhileZero_ref_t;
static rex_WaitWhileZero_ref_t rex_WaitWhileZero_clone(flatbuffers_builder_t *B, rex_WaitWhileZero_table_t t);
__flatbuffers_build_table(flatbuffers_, rex_WaitWhileZero, 2)

static const flatbuffers_voffset_t __rex_EnterProgramRequest_required[] = { 0 };
typedef flatbuffers_ref_t rex_EnterProgramRequest_ref_t;
static rex_EnterProgramRequest_ref_t rex_EnterProgramRequest_clone(flatbuffers_builder_t *B, rex_EnterProgramRequest_table_t t);
__flatbuffers_build_table(flatbuffers_, rex_EnterProgramRequest, 2)

static const flatbuffers_voffset_t __rex_EnterProgramResponse_required[] = { 0 };
typedef flatbuffers_ref_t rex_EnterProgramResponse_ref_t;
static rex_EnterProgramResponse_ref_t rex_EnterProgramResponse_clone(flatbuffers_builder_t *B, rex_EnterProgramResponse_table_t t);
__flatbuffers_build_table(flatbuffers_, rex_EnterProgramResponse, 0)

static const flatbuffers_voffset_t __rex_ExecuteProgramRequest_required[] = { 0 };
typedef flatbuffers_ref_t rex_ExecuteProgramRequest_ref_t;
static rex_ExecuteProgramRequest_ref_t rex_ExecuteProgramRequest_clone(flatbuffers_builder_t *B, rex_ExecuteProgramRequest_table_t t);
__flatbuffers_build_table(flatbuffers_, rex_ExecuteProgramRequest, 0)

static const flatbuffers_voffset_t __rex_InstructionOutput_required[] = { 0 };
typedef flatbuffers_ref_t rex_InstructionOutput_ref_t;
static rex_InstructionOutput_ref_t rex_InstructionOutput_clone(flatbuffers_builder_t *B, rex_InstructionOutput_table_t t);
__flatbuffers_build_table(flatbuffers_, rex_InstructionOutput, 2)

static const flatbuffers_voffset_t __rex_ExecuteProgramResponse_required[] = { 0 };
typedef flatbuffers_ref_t rex_ExecuteProgramResponse_ref_t;
static rex_ExecuteProgramResponse_ref_t rex_ExecuteProgramResponse_clone(flatbuffers_builder_t *B, rex_ExecuteProgramResponse_table_t t);
__flatbuffers_build_table(flatbuffers_, rex_ExecuteProgramResponse, 1)

static const flatbuffers_voffset_t __rex_RequestMessage_required[] = { 0 };
typedef flatbuffers_ref_t rex_RequestMessage_ref_t;
static rex_RequestMessage_ref_t rex_RequestMessage_clone(flatbuffers_builder_t *B, rex_RequestMessage_table_t t);
__flatbuffers_build_table(flatbuffers_, rex_RequestMessage, 2)

static const flatbuffers_voffset_t __rex_ResponseMessage_required[] = { 0 };
typedef flatbuffers_ref_t rex_ResponseMessage_ref_t;
static rex_ResponseMessage_ref_t rex_ResponseMessage_clone(flatbuffers_builder_t *B, rex_ResponseMessage_table_t t);
__flatbuffers_build_table(flatbuffers_, rex_ResponseMessage, 2)

#define __rex_EnumerateChipsRequest_formal_args 
#define __rex_EnumerateChipsRequest_call_args 
static inline rex_EnumerateChipsRequest_ref_t rex_EnumerateChipsRequest_create(flatbuffers_builder_t *B __rex_EnumerateChipsRequest_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, rex_EnumerateChipsRequest, rex_EnumerateChipsRequest_file_identifier, rex_EnumerateChipsRequest_type_identifier)

#define __rex_Chip_formal_args , rex_ChipID_enum_t v0, uint32_t v1, uint8_t v2, flatbuffers_string_ref_t v3
#define __rex_Chip_call_args , v0, v1, v2, v3
static inline rex_Chip_ref_t rex_Chip_create(flatbuffers_builder_t *B __rex_Chip_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, rex_Chip, rex_Chip_file_identifier, rex_Chip_type_identifier)

#define __rex_EnumerateChipsResponse_formal_args , rex_Chip_vec_ref_t v0
#define __rex_EnumerateChipsResponse_call_args , v0
static inline rex_EnumerateChipsResponse_ref_t rex_EnumerateChipsResponse_create(flatbuffers_builder_t *B __rex_EnumerateChipsResponse_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, rex_EnumerateChipsResponse, rex_EnumerateChipsResponse_file_identifier, rex_EnumerateChipsResponse_type_identifier)

#define __rex_WriteMemory_formal_args , rex_ChipID_enum_t v0, uint32_t v1, flatbuffers_uint8_vec_ref_t v2
#define __rex_WriteMemory_call_args , v0, v1, v2
static inline rex_WriteMemory_ref_t rex_WriteMemory_create(flatbuffers_builder_t *B __rex_WriteMemory_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, rex_WriteMemory, rex_WriteMemory_file_identifier, rex_WriteMemory_type_identifier)

#define __rex_ReadMemory_formal_args , rex_ChipID_enum_t v0, uint32_t v1, uint16_t v2
#define __rex_ReadMemory_call_args , v0, v1, v2
static inline rex_ReadMemory_ref_t rex_ReadMemory_create(flatbuffers_builder_t *B __rex_ReadMemory_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, rex_ReadMemory, rex_ReadMemory_file_identifier, rex_ReadMemory_type_identifier)

#define __rex_SetTimeout_formal_args , uint32_t v0
#define __rex_SetTimeout_call_args , v0
static inline rex_SetTimeout_ref_t rex_SetTimeout_create(flatbuffers_builder_t *B __rex_SetTimeout_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, rex_SetTimeout, rex_SetTimeout_file_identifier, rex_SetTimeout_type_identifier)

#define __rex_WaitUntil_formal_args ,\
  rex_ChipID_enum_t v0, uint32_t v1, rex_Comparison_enum_t v2, uint8_t v3, uint8_t v4
#define __rex_WaitUntil_call_args ,\
  v0, v1, v2, v3, v4
static inline rex_WaitUntil_ref_t rex_WaitUntil_create(flatbuffers_builder_t *B __rex_WaitUntil_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, rex_WaitUntil, rex_WaitUntil_file_identifier, rex_WaitUntil_type_identifier)

#define __rex_WaitWhileZero_formal_args , rex_ChipID_enum_t v0, uint32_t v1
#define __rex_WaitWhileZero_call_args , v0, v1
static inline rex_WaitWhileZero_ref_t rex_WaitWhileZero_create(flatbuffers_builder_t *B __rex_WaitWhileZero_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, rex_WaitWhileZero, rex_WaitWhileZero_file_identifier, rex_WaitWhileZero_type_identifier)

#define __rex_EnterProgramRequest_formal_args , rex_ProgramInstruction_union_vec_ref_t v1
#define __rex_EnterProgramRequest_call_args , v1
static inline rex_EnterProgramRequest_ref_t rex_EnterProgramRequest_create(flatbuffers_builder_t *B __rex_EnterProgramRequest_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, rex_EnterProgramRequest, rex_EnterProgramRequest_file_identifier, rex_EnterProgramRequest_type_identifier)

#define __rex_EnterProgramResponse_formal_args 
#define __rex_EnterProgramResponse_call_args 
static inline rex_EnterProgramResponse_ref_t rex_EnterProgramResponse_create(flatbuffers_builder_t *B __rex_EnterProgramResponse_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, rex_EnterProgramResponse, rex_EnterProgramResponse_file_identifier, rex_EnterProgramResponse_type_identifier)

#define __rex_ExecuteProgramRequest_formal_args 
#define __rex_ExecuteProgramRequest_call_args 
static inline rex_ExecuteProgramRequest_ref_t rex_ExecuteProgramRequest_create(flatbuffers_builder_t *B __rex_ExecuteProgramRequest_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, rex_ExecuteProgramRequest, rex_ExecuteProgramRequest_file_identifier, rex_ExecuteProgramRequest_type_identifier)

#define __rex_InstructionOutput_formal_args , rex_ErrorCode_enum_t v0, flatbuffers_uint8_vec_ref_t v1
#define __rex_InstructionOutput_call_args , v0, v1
static inline rex_InstructionOutput_ref_t rex_InstructionOutput_create(flatbuffers_builder_t *B __rex_InstructionOutput_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, rex_InstructionOutput, rex_InstructionOutput_file_identifier, rex_InstructionOutput_type_identifier)

#define __rex_ExecuteProgramResponse_formal_args , rex_InstructionOutput_vec_ref_t v0
#define __rex_ExecuteProgramResponse_call_args , v0
static inline rex_ExecuteProgramResponse_ref_t rex_ExecuteProgramResponse_create(flatbuffers_builder_t *B __rex_ExecuteProgramResponse_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, rex_ExecuteProgramResponse, rex_ExecuteProgramResponse_file_identifier, rex_ExecuteProgramResponse_type_identifier)

#define __rex_RequestMessage_formal_args , rex_Request_union_ref_t v1
#define __rex_RequestMessage_call_args , v1
static inline rex_RequestMessage_ref_t rex_RequestMessage_create(flatbuffers_builder_t *B __rex_RequestMessage_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, rex_RequestMessage, rex_RequestMessage_file_identifier, rex_RequestMessage_type_identifier)

#define __rex_ResponseMessage_formal_args , rex_Response_union_ref_t v1
#define __rex_ResponseMessage_call_args , v1
static inline rex_ResponseMessage_ref_t rex_ResponseMessage_create(flatbuffers_builder_t *B __rex_ResponseMessage_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, rex_ResponseMessage, rex_ResponseMessage_file_identifier, rex_ResponseMessage_type_identifier)

static inline rex_ProgramInstruction_union_ref_t rex_ProgramInstruction_as_NONE(void)
{ rex_ProgramInstruction_union_ref_t uref; uref.type = rex_ProgramInstruction_NONE; uref.value = 0; return uref; }
static inline rex_ProgramInstruction_union_ref_t rex_ProgramInstruction_as_WriteMemory(rex_WriteMemory_ref_t ref)
{ rex_ProgramInstruction_union_ref_t uref; uref.type = rex_ProgramInstruction_WriteMemory; uref.value = ref; return uref; }
static inline rex_ProgramInstruction_union_ref_t rex_ProgramInstruction_as_ReadMemory(rex_ReadMemory_ref_t ref)
{ rex_ProgramInstruction_union_ref_t uref; uref.type = rex_ProgramInstruction_ReadMemory; uref.value = ref; return uref; }
static inline rex_ProgramInstruction_union_ref_t rex_ProgramInstruction_as_SetTimeout(rex_SetTimeout_ref_t ref)
{ rex_ProgramInstruction_union_ref_t uref; uref.type = rex_ProgramInstruction_SetTimeout; uref.value = ref; return uref; }
static inline rex_ProgramInstruction_union_ref_t rex_ProgramInstruction_as_WaitUntil(rex_WaitUntil_ref_t ref)
{ rex_ProgramInstruction_union_ref_t uref; uref.type = rex_ProgramInstruction_WaitUntil; uref.value = ref; return uref; }
static inline rex_ProgramInstruction_union_ref_t rex_ProgramInstruction_as_WaitWhileZero(rex_WaitWhileZero_ref_t ref)
{ rex_ProgramInstruction_union_ref_t uref; uref.type = rex_ProgramInstruction_WaitWhileZero; uref.value = ref; return uref; }
__flatbuffers_build_union_vector(flatbuffers_, rex_ProgramInstruction)

static rex_ProgramInstruction_union_ref_t rex_ProgramInstruction_clone(flatbuffers_builder_t *B, rex_ProgramInstruction_union_t u)
{
    switch (u.type) {
    case 1: return rex_ProgramInstruction_as_WriteMemory(rex_WriteMemory_clone(B, (rex_WriteMemory_table_t)u.value));
    case 2: return rex_ProgramInstruction_as_ReadMemory(rex_ReadMemory_clone(B, (rex_ReadMemory_table_t)u.value));
    case 3: return rex_ProgramInstruction_as_SetTimeout(rex_SetTimeout_clone(B, (rex_SetTimeout_table_t)u.value));
    case 4: return rex_ProgramInstruction_as_WaitUntil(rex_WaitUntil_clone(B, (rex_WaitUntil_table_t)u.value));
    case 5: return rex_ProgramInstruction_as_WaitWhileZero(rex_WaitWhileZero_clone(B, (rex_WaitWhileZero_table_t)u.value));
    default: return rex_ProgramInstruction_as_NONE();
    }
}

static inline rex_Request_union_ref_t rex_Request_as_NONE(void)
{ rex_Request_union_ref_t uref; uref.type = rex_Request_NONE; uref.value = 0; return uref; }
static inline rex_Request_union_ref_t rex_Request_as_EnumerateChipsRequest(rex_EnumerateChipsRequest_ref_t ref)
{ rex_Request_union_ref_t uref; uref.type = rex_Request_EnumerateChipsRequest; uref.value = ref; return uref; }
static inline rex_Request_union_ref_t rex_Request_as_EnterProgramRequest(rex_EnterProgramRequest_ref_t ref)
{ rex_Request_union_ref_t uref; uref.type = rex_Request_EnterProgramRequest; uref.value = ref; return uref; }
static inline rex_Request_union_ref_t rex_Request_as_ExecuteProgramRequest(rex_ExecuteProgramRequest_ref_t ref)
{ rex_Request_union_ref_t uref; uref.type = rex_Request_ExecuteProgramRequest; uref.value = ref; return uref; }
__flatbuffers_build_union_vector(flatbuffers_, rex_Request)

static rex_Request_union_ref_t rex_Request_clone(flatbuffers_builder_t *B, rex_Request_union_t u)
{
    switch (u.type) {
    case 1: return rex_Request_as_EnumerateChipsRequest(rex_EnumerateChipsRequest_clone(B, (rex_EnumerateChipsRequest_table_t)u.value));
    case 2: return rex_Request_as_EnterProgramRequest(rex_EnterProgramRequest_clone(B, (rex_EnterProgramRequest_table_t)u.value));
    case 3: return rex_Request_as_ExecuteProgramRequest(rex_ExecuteProgramRequest_clone(B, (rex_ExecuteProgramRequest_table_t)u.value));
    default: return rex_Request_as_NONE();
    }
}

static inline rex_Response_union_ref_t rex_Response_as_NONE(void)
{ rex_Response_union_ref_t uref; uref.type = rex_Response_NONE; uref.value = 0; return uref; }
static inline rex_Response_union_ref_t rex_Response_as_EnumerateChipsResponse(rex_EnumerateChipsResponse_ref_t ref)
{ rex_Response_union_ref_t uref; uref.type = rex_Response_EnumerateChipsResponse; uref.value = ref; return uref; }
static inline rex_Response_union_ref_t rex_Response_as_EnterProgramResponse(rex_EnterProgramResponse_ref_t ref)
{ rex_Response_union_ref_t uref; uref.type = rex_Response_EnterProgramResponse; uref.value = ref; return uref; }
static inline rex_Response_union_ref_t rex_Response_as_ExecuteProgramResponse(rex_ExecuteProgramResponse_ref_t ref)
{ rex_Response_union_ref_t uref; uref.type = rex_Response_ExecuteProgramResponse; uref.value = ref; return uref; }
__flatbuffers_build_union_vector(flatbuffers_, rex_Response)

static rex_Response_union_ref_t rex_Response_clone(flatbuffers_builder_t *B, rex_Response_union_t u)
{
    switch (u.type) {
    case 1: return rex_Response_as_EnumerateChipsResponse(rex_EnumerateChipsResponse_clone(B, (rex_EnumerateChipsResponse_table_t)u.value));
    case 2: return rex_Response_as_EnterProgramResponse(rex_EnterProgramResponse_clone(B, (rex_EnterProgramResponse_table_t)u.value));
    case 3: return rex_Response_as_ExecuteProgramResponse(rex_ExecuteProgramResponse_clone(B, (rex_ExecuteProgramResponse_table_t)u.value));
    default: return rex_Response_as_NONE();
    }
}


static inline rex_EnumerateChipsRequest_ref_t rex_EnumerateChipsRequest_create(flatbuffers_builder_t *B __rex_EnumerateChipsRequest_formal_args)
{
    if (rex_EnumerateChipsRequest_start(B)) {
        return 0;
    }
    return rex_EnumerateChipsRequest_end(B);
}

static rex_EnumerateChipsRequest_ref_t rex_EnumerateChipsRequest_clone(flatbuffers_builder_t *B, rex_EnumerateChipsRequest_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (rex_EnumerateChipsRequest_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, rex_EnumerateChipsRequest_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, rex_Chip_chip_id, rex_ChipID, rex_ChipID_enum_t, 2, 2, UINT16_C(0), rex_Chip)
__flatbuffers_build_scalar_field(1, flatbuffers_, rex_Chip_size, flatbuffers_uint32, uint32_t, 4, 4, UINT32_C(0), rex_Chip)
__flatbuffers_build_scalar_field(2, flatbuffers_, rex_Chip_flags, flatbuffers_uint8, uint8_t, 1, 1, UINT8_C(0), rex_Chip)
__flatbuffers_build_string_field(3, flatbuffers_, rex_Chip_name, rex_Chip)

static inline rex_Chip_ref_t rex_Chip_create(flatbuffers_builder_t *B __rex_Chip_formal_args)
{
    if (rex_Chip_start(B)
        || rex_Chip_size_add(B, v1)
        || rex_Chip_name_add(B, v3)
        || rex_Chip_chip_id_add(B, v0)
        || rex_Chip_flags_add(B, v2)) {
        return 0;
    }
    return rex_Chip_end(B);
}

static rex_Chip_ref_t rex_Chip_clone(flatbuffers_builder_t *B, rex_Chip_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (rex_Chip_start(B)
        || rex_Chip_size_pick(B, t)
        || rex_Chip_name_pick(B, t)
        || rex_Chip_chip_id_pick(B, t)
        || rex_Chip_flags_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, rex_Chip_end(B));
}

__flatbuffers_build_table_vector_field(0, flatbuffers_, rex_EnumerateChipsResponse_chips, rex_Chip, rex_EnumerateChipsResponse)

static inline rex_EnumerateChipsResponse_ref_t rex_EnumerateChipsResponse_create(flatbuffers_builder_t *B __rex_EnumerateChipsResponse_formal_args)
{
    if (rex_EnumerateChipsResponse_start(B)
        || rex_EnumerateChipsResponse_chips_add(B, v0)) {
        return 0;
    }
    return rex_EnumerateChipsResponse_end(B);
}

static rex_EnumerateChipsResponse_ref_t rex_EnumerateChipsResponse_clone(flatbuffers_builder_t *B, rex_EnumerateChipsResponse_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (rex_EnumerateChipsResponse_start(B)
        || rex_EnumerateChipsResponse_chips_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, rex_EnumerateChipsResponse_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, rex_WriteMemory_chip_id, rex_ChipID, rex_ChipID_enum_t, 2, 2, UINT16_C(0), rex_WriteMemory)
__flatbuffers_build_scalar_field(1, flatbuffers_, rex_WriteMemory_chip_addr, flatbuffers_uint32, uint32_t, 4, 4, UINT32_C(0), rex_WriteMemory)
__flatbuffers_build_vector_field(2, flatbuffers_, rex_WriteMemory_data, flatbuffers_uint8, uint8_t, rex_WriteMemory)

static inline rex_WriteMemory_ref_t rex_WriteMemory_create(flatbuffers_builder_t *B __rex_WriteMemory_formal_args)
{
    if (rex_WriteMemory_start(B)
        || rex_WriteMemory_chip_addr_add(B, v1)
        || rex_WriteMemory_data_add(B, v2)
        || rex_WriteMemory_chip_id_add(B, v0)) {
        return 0;
    }
    return rex_WriteMemory_end(B);
}

static rex_WriteMemory_ref_t rex_WriteMemory_clone(flatbuffers_builder_t *B, rex_WriteMemory_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (rex_WriteMemory_start(B)
        || rex_WriteMemory_chip_addr_pick(B, t)
        || rex_WriteMemory_data_pick(B, t)
        || rex_WriteMemory_chip_id_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, rex_WriteMemory_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, rex_ReadMemory_chip_id, rex_ChipID, rex_ChipID_enum_t, 2, 2, UINT16_C(0), rex_ReadMemory)
__flatbuffers_build_scalar_field(1, flatbuffers_, rex_ReadMemory_chip_addr, flatbuffers_uint32, uint32_t, 4, 4, UINT32_C(0), rex_ReadMemory)
__flatbuffers_build_scalar_field(2, flatbuffers_, rex_ReadMemory_size, flatbuffers_uint16, uint16_t, 2, 2, UINT16_C(0), rex_ReadMemory)

static inline rex_ReadMemory_ref_t rex_ReadMemory_create(flatbuffers_builder_t *B __rex_ReadMemory_formal_args)
{
    if (rex_ReadMemory_start(B)
        || rex_ReadMemory_chip_addr_add(B, v1)
        || rex_ReadMemory_chip_id_add(B, v0)
        || rex_ReadMemory_size_add(B, v2)) {
        return 0;
    }
    return rex_ReadMemory_end(B);
}

static rex_ReadMemory_ref_t rex_ReadMemory_clone(flatbuffers_builder_t *B, rex_ReadMemory_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (rex_ReadMemory_start(B)
        || rex_ReadMemory_chip_addr_pick(B, t)
        || rex_ReadMemory_chip_id_pick(B, t)
        || rex_ReadMemory_size_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, rex_ReadMemory_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, rex_SetTimeout_clock_cycles, flatbuffers_uint32, uint32_t, 4, 4, UINT32_C(0), rex_SetTimeout)

static inline rex_SetTimeout_ref_t rex_SetTimeout_create(flatbuffers_builder_t *B __rex_SetTimeout_formal_args)
{
    if (rex_SetTimeout_start(B)
        || rex_SetTimeout_clock_cycles_add(B, v0)) {
        return 0;
    }
    return rex_SetTimeout_end(B);
}

static rex_SetTimeout_ref_t rex_SetTimeout_clone(flatbuffers_builder_t *B, rex_SetTimeout_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (rex_SetTimeout_start(B)
        || rex_SetTimeout_clock_cycles_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, rex_SetTimeout_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, rex_WaitUntil_chip_id, rex_ChipID, rex_ChipID_enum_t, 2, 2, UINT16_C(0), rex_WaitUntil)
__flatbuffers_build_scalar_field(1, flatbuffers_, rex_WaitUntil_chip_addr, flatbuffers_uint32, uint32_t, 4, 4, UINT32_C(0), rex_WaitUntil)
__flatbuffers_build_scalar_field(2, flatbuffers_, rex_WaitUntil_cmp_func, rex_Comparison, rex_Comparison_enum_t, 1, 1, UINT8_C(0), rex_WaitUntil)
__flatbuffers_build_scalar_field(3, flatbuffers_, rex_WaitUntil_mask, flatbuffers_uint8, uint8_t, 1, 1, UINT8_C(0), rex_WaitUntil)
__flatbuffers_build_scalar_field(4, flatbuffers_, rex_WaitUntil_cmp_value, flatbuffers_uint8, uint8_t, 1, 1, UINT8_C(0), rex_WaitUntil)

static inline rex_WaitUntil_ref_t rex_WaitUntil_create(flatbuffers_builder_t *B __rex_WaitUntil_formal_args)
{
    if (rex_WaitUntil_start(B)
        || rex_WaitUntil_chip_addr_add(B, v1)
        || rex_WaitUntil_chip_id_add(B, v0)
        || rex_WaitUntil_cmp_func_add(B, v2)
        || rex_WaitUntil_mask_add(B, v3)
        || rex_WaitUntil_cmp_value_add(B, v4)) {
        return 0;
    }
    return rex_WaitUntil_end(B);
}

static rex_WaitUntil_ref_t rex_WaitUntil_clone(flatbuffers_builder_t *B, rex_WaitUntil_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (rex_WaitUntil_start(B)
        || rex_WaitUntil_chip_addr_pick(B, t)
        || rex_WaitUntil_chip_id_pick(B, t)
        || rex_WaitUntil_cmp_func_pick(B, t)
        || rex_WaitUntil_mask_pick(B, t)
        || rex_WaitUntil_cmp_value_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, rex_WaitUntil_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, rex_WaitWhileZero_chip_id, rex_ChipID, rex_ChipID_enum_t, 2, 2, UINT16_C(0), rex_WaitWhileZero)
__flatbuffers_build_scalar_field(1, flatbuffers_, rex_WaitWhileZero_chip_addr, flatbuffers_uint32, uint32_t, 4, 4, UINT32_C(0), rex_WaitWhileZero)

static inline rex_WaitWhileZero_ref_t rex_WaitWhileZero_create(flatbuffers_builder_t *B __rex_WaitWhileZero_formal_args)
{
    if (rex_WaitWhileZero_start(B)
        || rex_WaitWhileZero_chip_addr_add(B, v1)
        || rex_WaitWhileZero_chip_id_add(B, v0)) {
        return 0;
    }
    return rex_WaitWhileZero_end(B);
}

static rex_WaitWhileZero_ref_t rex_WaitWhileZero_clone(flatbuffers_builder_t *B, rex_WaitWhileZero_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (rex_WaitWhileZero_start(B)
        || rex_WaitWhileZero_chip_addr_pick(B, t)
        || rex_WaitWhileZero_chip_id_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, rex_WaitWhileZero_end(B));
}

__flatbuffers_build_union_vector_field(1, flatbuffers_, rex_EnterProgramRequest_instructions, rex_ProgramInstruction, rex_EnterProgramRequest)
__flatbuffers_build_union_table_vector_value_field(flatbuffers_, rex_EnterProgramRequest_instructions, rex_ProgramInstruction, WriteMemory, rex_WriteMemory)
__flatbuffers_build_union_table_vector_value_field(flatbuffers_, rex_EnterProgramRequest_instructions, rex_ProgramInstruction, ReadMemory, rex_ReadMemory)
__flatbuffers_build_union_table_vector_value_field(flatbuffers_, rex_EnterProgramRequest_instructions, rex_ProgramInstruction, SetTimeout, rex_SetTimeout)
__flatbuffers_build_union_table_vector_value_field(flatbuffers_, rex_EnterProgramRequest_instructions, rex_ProgramInstruction, WaitUntil, rex_WaitUntil)
__flatbuffers_build_union_table_vector_value_field(flatbuffers_, rex_EnterProgramRequest_instructions, rex_ProgramInstruction, WaitWhileZero, rex_WaitWhileZero)

static inline rex_EnterProgramRequest_ref_t rex_EnterProgramRequest_create(flatbuffers_builder_t *B __rex_EnterProgramRequest_formal_args)
{
    if (rex_EnterProgramRequest_start(B)
        || rex_EnterProgramRequest_instructions_add(B, v1)) {
        return 0;
    }
    return rex_EnterProgramRequest_end(B);
}

static rex_EnterProgramRequest_ref_t rex_EnterProgramRequest_clone(flatbuffers_builder_t *B, rex_EnterProgramRequest_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (rex_EnterProgramRequest_start(B)
        || rex_EnterProgramRequest_instructions_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, rex_EnterProgramRequest_end(B));
}


static inline rex_EnterProgramResponse_ref_t rex_EnterProgramResponse_create(flatbuffers_builder_t *B __rex_EnterProgramResponse_formal_args)
{
    if (rex_EnterProgramResponse_start(B)) {
        return 0;
    }
    return rex_EnterProgramResponse_end(B);
}

static rex_EnterProgramResponse_ref_t rex_EnterProgramResponse_clone(flatbuffers_builder_t *B, rex_EnterProgramResponse_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (rex_EnterProgramResponse_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, rex_EnterProgramResponse_end(B));
}


static inline rex_ExecuteProgramRequest_ref_t rex_ExecuteProgramRequest_create(flatbuffers_builder_t *B __rex_ExecuteProgramRequest_formal_args)
{
    if (rex_ExecuteProgramRequest_start(B)) {
        return 0;
    }
    return rex_ExecuteProgramRequest_end(B);
}

static rex_ExecuteProgramRequest_ref_t rex_ExecuteProgramRequest_clone(flatbuffers_builder_t *B, rex_ExecuteProgramRequest_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (rex_ExecuteProgramRequest_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, rex_ExecuteProgramRequest_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, rex_InstructionOutput_error_code, rex_ErrorCode, rex_ErrorCode_enum_t, 1, 1, UINT8_C(0), rex_InstructionOutput)
__flatbuffers_build_vector_field(1, flatbuffers_, rex_InstructionOutput_data, flatbuffers_uint8, uint8_t, rex_InstructionOutput)

static inline rex_InstructionOutput_ref_t rex_InstructionOutput_create(flatbuffers_builder_t *B __rex_InstructionOutput_formal_args)
{
    if (rex_InstructionOutput_start(B)
        || rex_InstructionOutput_data_add(B, v1)
        || rex_InstructionOutput_error_code_add(B, v0)) {
        return 0;
    }
    return rex_InstructionOutput_end(B);
}

static rex_InstructionOutput_ref_t rex_InstructionOutput_clone(flatbuffers_builder_t *B, rex_InstructionOutput_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (rex_InstructionOutput_start(B)
        || rex_InstructionOutput_data_pick(B, t)
        || rex_InstructionOutput_error_code_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, rex_InstructionOutput_end(B));
}

__flatbuffers_build_table_vector_field(0, flatbuffers_, rex_ExecuteProgramResponse_outputs, rex_InstructionOutput, rex_ExecuteProgramResponse)

static inline rex_ExecuteProgramResponse_ref_t rex_ExecuteProgramResponse_create(flatbuffers_builder_t *B __rex_ExecuteProgramResponse_formal_args)
{
    if (rex_ExecuteProgramResponse_start(B)
        || rex_ExecuteProgramResponse_outputs_add(B, v0)) {
        return 0;
    }
    return rex_ExecuteProgramResponse_end(B);
}

static rex_ExecuteProgramResponse_ref_t rex_ExecuteProgramResponse_clone(flatbuffers_builder_t *B, rex_ExecuteProgramResponse_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (rex_ExecuteProgramResponse_start(B)
        || rex_ExecuteProgramResponse_outputs_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, rex_ExecuteProgramResponse_end(B));
}

__flatbuffers_build_union_field(1, flatbuffers_, rex_RequestMessage_request, rex_Request, rex_RequestMessage)
__flatbuffers_build_union_table_value_field(flatbuffers_, rex_RequestMessage_request, rex_Request, EnumerateChipsRequest, rex_EnumerateChipsRequest)
__flatbuffers_build_union_table_value_field(flatbuffers_, rex_RequestMessage_request, rex_Request, EnterProgramRequest, rex_EnterProgramRequest)
__flatbuffers_build_union_table_value_field(flatbuffers_, rex_RequestMessage_request, rex_Request, ExecuteProgramRequest, rex_ExecuteProgramRequest)

static inline rex_RequestMessage_ref_t rex_RequestMessage_create(flatbuffers_builder_t *B __rex_RequestMessage_formal_args)
{
    if (rex_RequestMessage_start(B)
        || rex_RequestMessage_request_add_value(B, v1)
        || rex_RequestMessage_request_add_type(B, v1.type)) {
        return 0;
    }
    return rex_RequestMessage_end(B);
}

static rex_RequestMessage_ref_t rex_RequestMessage_clone(flatbuffers_builder_t *B, rex_RequestMessage_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (rex_RequestMessage_start(B)
        || rex_RequestMessage_request_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, rex_RequestMessage_end(B));
}

__flatbuffers_build_union_field(1, flatbuffers_, rex_ResponseMessage_response, rex_Response, rex_ResponseMessage)
__flatbuffers_build_union_table_value_field(flatbuffers_, rex_ResponseMessage_response, rex_Response, EnumerateChipsResponse, rex_EnumerateChipsResponse)
__flatbuffers_build_union_table_value_field(flatbuffers_, rex_ResponseMessage_response, rex_Response, EnterProgramResponse, rex_EnterProgramResponse)
__flatbuffers_build_union_table_value_field(flatbuffers_, rex_ResponseMessage_response, rex_Response, ExecuteProgramResponse, rex_ExecuteProgramResponse)

static inline rex_ResponseMessage_ref_t rex_ResponseMessage_create(flatbuffers_builder_t *B __rex_ResponseMessage_formal_args)
{
    if (rex_ResponseMessage_start(B)
        || rex_ResponseMessage_response_add_value(B, v1)
        || rex_ResponseMessage_response_add_type(B, v1.type)) {
        return 0;
    }
    return rex_ResponseMessage_end(B);
}

static rex_ResponseMessage_ref_t rex_ResponseMessage_clone(flatbuffers_builder_t *B, rex_ResponseMessage_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (rex_ResponseMessage_start(B)
        || rex_ResponseMessage_response_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, rex_ResponseMessage_end(B));
}

#include "flatcc/flatcc_epilogue.h"
#endif /* REX_BUILDER_H */
